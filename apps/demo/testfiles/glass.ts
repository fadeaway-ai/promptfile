/* eslint-disable */
// THIS FILE WAS GENERATED BY GLASS -- DO NOT EDIT!

import { runGlass, useState } from '@glass-lang/glasslib'

export function getBasicPrompt() {
  function getTestData() {
    return {}
  }

  const compile = async (opt: { args: {} } = { args: {} }) => {
    const GLASS_STATE = {}

    const GLASSVAR = {}
    const TEMPLATE = `
<User>
foo
</User>`
    return {
      fileName: 'basic',
      interpolatedDoc: TEMPLATE,
      originalDoc: '---\nlanguage: python\n---\n\n<User>\nfoo\n</User>',
      state: GLASS_STATE,
      interpolationArgs: opt.args || {},
      requestBlocks: [],
    }
  }

  return { getTestData, compile }
}

export function getDuplicateInterpolationPrompt() {
  function getTestData() {
    return {}
  }

  const compile = async (opt: { args: { foo: string; bar: string } }) => {
    const GLASS_STATE = {}
    const { foo, bar } = opt.args

    const GLASSVAR = {}
    const TEMPLATE = `
<User>
${foo} ${bar} ${foo}
${bar}
</User>`
    return {
      fileName: 'duplicateInterpolation',
      interpolatedDoc: TEMPLATE,
      originalDoc: '---\nlanguage: python\n---\n\n<User>\n${foo} ${bar} ${foo}\n${bar}\n</User>',
      state: GLASS_STATE,
      interpolationArgs: opt.args || {},
      requestBlocks: [],
    }
  }

  return { getTestData, compile }
}

export function getInterpolationPrompt() {
  function getTestData() {
    return {}
  }

  const compile = async (opt: { args: { foo: string } }) => {
    const GLASS_STATE = {}
    const { foo } = opt.args

    const GLASSVAR = {}
    const TEMPLATE = `
<User>
${foo}
</User>`
    return {
      fileName: 'interpolation',
      interpolatedDoc: TEMPLATE,
      originalDoc: '---\nlanguage: python\n---\n\n<User>\n${foo}\n</User>',
      state: GLASS_STATE,
      interpolationArgs: opt.args || {},
      requestBlocks: [],
    }
  }

  return { getTestData, compile }
}

export function getInterstitialPrompt() {
  function getTestData() {
    return {}
  }

  const compile = async (opt: { args: { foo: string; print: string } }) => {
    const GLASS_STATE = {}
    const { foo, print } = opt.args
    foo = 'bar'
    print(foo)

    const GLASSVAR = {}
    const TEMPLATE = `
foo = "bar"
<User>
${foo}
</User>
print(foo)`
    return {
      fileName: 'interstitial',
      interpolatedDoc: TEMPLATE,
      originalDoc: '---\nlanguage: python\n---\n\nfoo = "bar"\n<User>\n${foo}\n</User>\nprint(foo)',
      state: GLASS_STATE,
      interpolationArgs: opt.args || {},
      requestBlocks: [],
    }
  }

  return { getTestData, compile }
}

export function getLiteralPrompt() {
  function getTestData() {
    return {}
  }

  const compile = async (opt: { args: { response: string; requests: string } }) => {
    const GLASS_STATE = {}
    const { response, requests } = opt.args
    import requests = response
    requests.get('https://elliottburris.com')

    const GLASSVAR = {}
    const TEMPLATE = `
import requests

response = requests.get("https://elliottburris.com")

<System>
your job is to answer questions based on the following website code:
###
${response.text}
###
</System>

<User>
where did elliott go to school?
</User>

<Request model="gpt-3.5-turbo" />`
    return {
      fileName: 'literal',
      interpolatedDoc: TEMPLATE,
      originalDoc:
        '---\nlanguage: python\n---\n\nimport requests\n\nresponse = requests.get("https://elliottburris.com")\n\n<System>\nyour job is to answer questions based on the following website code:\n###\n${response.text}\n###\n</System>\n\n<User>\nwhere did elliott go to school?\n</User>\n\n<Request model="gpt-3.5-turbo" />',
      state: GLASS_STATE,
      interpolationArgs: opt.args || {},
      requestBlocks: [
        {
          model: 'gpt-3.5-turbo',
          onResponse: undefined,
          temperature: undefined,
          maxTokens: undefined,
          stopSequence: undefined,
        },
      ],
    }
  }

  return { getTestData, compile }
}

export function getMultipleInterpolationPrompt() {
  function getTestData() {
    return {}
  }

  const compile = async (opt: { args: { foo: string; bar: string } }) => {
    const GLASS_STATE = {}
    const { foo, bar } = opt.args

    const GLASSVAR = {}
    const TEMPLATE = `
<User>
${foo} ${bar}
</User>`
    return {
      fileName: 'multipleInterpolation',
      interpolatedDoc: TEMPLATE,
      originalDoc: '---\nlanguage: python\n---\n\n<User>\n${foo} ${bar}\n</User>',
      state: GLASS_STATE,
      interpolationArgs: opt.args || {},
      requestBlocks: [],
    }
  }

  return { getTestData, compile }
}

export function getNonInterpolationPrompt() {
  function getTestData() {
    return {}
  }

  const compile = async (opt: { args: { foo: string } }) => {
    const GLASS_STATE = {}
    const { foo } = opt.args

    const GLASSVAR = {}
    const TEMPLATE = `
<User>
${foo} and {foo}
</User>`
    return {
      fileName: 'nonInterpolation',
      interpolatedDoc: TEMPLATE,
      originalDoc: '---\nlanguage: python\n---\n\n<User>\n${foo} and {foo}\n</User>',
      state: GLASS_STATE,
      interpolationArgs: opt.args || {},
      requestBlocks: [],
    }
  }

  return { getTestData, compile }
}

import requests from 'requests'

export function getPyBrowserPrompt() {
  function getTestData() {
    return {}
  }

  const compile = async (opt: { args: { response: string } }) => {
    const GLASS_STATE = {}
    const { response } = opt.args
    response = requests.get('https://elliottburris.com')

    const GLASSVAR = {}
    const TEMPLATE = `
import requests from "requests"

response = requests.get("https://elliottburris.com")

<System>
your job is to answer questions based on the following website code:
###
${response.text}
###
</System>

<User>
hey where did elliott go to grad school?
</User>

<Assistant>
Elliott Burris went to graduate school at Cambridge, where he received an M.Phil.
</Assistant>

<User>
what is elliott's favorite color?
</User>

<Assistant>
Sorry, we cannot determine Elliott's favorite color from the provided website code.
</Assistant>

<User>
what is elliott's last name?
</User>

<Request model="gpt-3.5-turbo" />`
    return {
      fileName: 'py-browser',
      interpolatedDoc: TEMPLATE,
      originalDoc:
        '---\nlanguage: python\n---\n\nimport requests from "requests"\n\nresponse = requests.get("https://elliottburris.com")\n\n<System>\nyour job is to answer questions based on the following website code:\n###\n${response.text}\n###\n</System>\n\n<User>\nhey where did elliott go to grad school?\n</User>\n\n<Assistant>\nElliott Burris went to graduate school at Cambridge, where he received an M.Phil.\n</Assistant>\n\n<User>\nwhat is elliott\'s favorite color?\n</User>\n\n<Assistant>\nSorry, we cannot determine Elliott\'s favorite color from the provided website code.\n</Assistant>\n\n<User>\nwhat is elliott\'s last name?\n</User>\n\n<Request model="gpt-3.5-turbo" />',
      state: GLASS_STATE,
      interpolationArgs: opt.args || {},
      requestBlocks: [
        {
          model: 'gpt-3.5-turbo',
          onResponse: undefined,
          temperature: undefined,
          maxTokens: undefined,
          stopSequence: undefined,
        },
      ],
    }
  }

  return { getTestData, compile }
}

export function getPyForPrompt() {
  function getTestData() {
    return {}
  }

  const compile = async (opt: { args: { messages: string; True: string } }) => {
    const GLASS_STATE = {}
    const { messages, True } = opt.args
    messages = [
      { role: 'user', content: 'name an ice cream', show: True },
      { role: 'assistant', content: 'Vanilla', show: True },
      { role: 'user', content: 'name a fruit', show: True },
    ]

    const GLASSVAR = {
      '0': m['show'] ? `${m['content']}` : '',
      '1': messages
        .map(
          m => `
<Block role={${JSON.stringify(m['role'])}}>
<Text if={${JSON.stringify(m['show'])}}>
${m['content']}
</Text>
</Block>
`
        )
        .join('\n\n'),
    }
    const TEMPLATE = `
messages = [
    { "role": 'user', "content": 'name an ice cream', "show": True  },
    { "role": "assistant", "content": 'Vanilla', "show": True },
    { "role": 'user', "content": 'name a fruit', "show": True  }
]

${GLASSVAR[1]}

<Request model="gpt-3.5-turbo" />`
    return {
      fileName: 'py-for',
      interpolatedDoc: TEMPLATE,
      originalDoc:
        '---\nlanguage: python\n---\n\nmessages = [\n    { "role": \'user\', "content": \'name an ice cream\', "show": True  },\n    { "role": "assistant", "content": \'Vanilla\', "show": True },\n    { "role": \'user\', "content": \'name a fruit\', "show": True  }\n]\n\n<For each={messages} as="m">\n\n<Block role={m["role"]}>\n<Text if={m["show"]}>\n${m["content"]}\n</Text>\n</Block>\n\n</For>\n\n<Request model="gpt-3.5-turbo" />',
      state: GLASS_STATE,
      interpolationArgs: opt.args || {},
      requestBlocks: [
        {
          model: 'gpt-3.5-turbo',
          onResponse: undefined,
          temperature: undefined,
          maxTokens: undefined,
          stopSequence: undefined,
        },
      ],
    }
  }

  return { getTestData, compile }
}

export function getPyInterpolationPrompt() {
  function getTestData() {
    return {}
  }

  const compile = async (opt: { args: { userText: string } }) => {
    const GLASS_STATE = {}
    const { userText } = opt.args
    userText = 'I need help with my homework'

    const GLASSVAR = {}
    const TEMPLATE = `
userText = "I need help with my homework"

<System>
You are a helpful assistant.

${userText}
</System>

<Request model="gpt-3.5-turbo" />`
    return {
      fileName: 'py-interpolation',
      interpolatedDoc: TEMPLATE,
      originalDoc:
        '---\nlanguage: python\n---\n\nuserText = "I need help with my homework"\n\n<System>\nYou are a helpful assistant.\n\n${userText}\n</System>\n\n<Request model="gpt-3.5-turbo" />',
      state: GLASS_STATE,
      interpolationArgs: opt.args || {},
      requestBlocks: [
        {
          model: 'gpt-3.5-turbo',
          onResponse: undefined,
          temperature: undefined,
          maxTokens: undefined,
          stopSequence: undefined,
        },
      ],
    }
  }

  return { getTestData, compile }
}

export function getTestblockPrompt() {
  function getTestData() {
    return [{ foo: 'tell me a story' }].map(glass_example => ({ ...{}, ...glass_example }))
  }

  const compile = async (opt: { args: { foo: string } }) => {
    const GLASS_STATE = {}
    const { foo } = opt.args

    const GLASSVAR = {}
    const TEMPLATE = `
<Test>
return [{"foo": "tell me a story"}]
</Test>

<System>
${foo}
</System>

<Request model="gpt-3.5-turbo" />`
    return {
      fileName: 'testblock',
      interpolatedDoc: TEMPLATE,
      originalDoc:
        '---\nlanguage: python\n---\n\n<Test>\nreturn [{"foo": "tell me a story"}]\n</Test>\n\n<System>\n${foo}\n</System>\n\n<Request model="gpt-3.5-turbo" />',
      state: GLASS_STATE,
      interpolationArgs: opt.args || {},
      requestBlocks: [
        {
          model: 'gpt-3.5-turbo',
          onResponse: undefined,
          temperature: undefined,
          maxTokens: undefined,
          stopSequence: undefined,
        },
      ],
    }
  }

  return { getTestData, compile }
}

export function getArgsPrompt() {
  function getTestData() {
    return {}
  }

  const compile = async (opt: { args: { foo: number; bar: string } }) => {
    const GLASS_STATE = {}
    const { foo, bar } = opt.args

    const GLASSVAR = {}
    const TEMPLATE = `<User>
${foo} ${bar}
</User>`
    return {
      fileName: 'args',
      interpolatedDoc: TEMPLATE,
      originalDoc:
        '---\nlanguage: typescript\nargs:\n    foo: number\n    bar: string\n---\n<User>\n${foo} ${bar}\n</User>',
      state: GLASS_STATE,
      interpolationArgs: opt.args || {},
      requestBlocks: [],
    }
  }

  return { getTestData, compile }
}

export function getCodeBlockPrompt() {
  function getTestData() {
    return {}
  }

  const compile = async (opt: { args: {} } = { args: {} }) => {
    const GLASS_STATE = {}

    const a = '3'

    const GLASSVAR = {}
    const TEMPLATE = `const a = "3"
<User>
${a}
</User>`
    return {
      fileName: 'codeBlock',
      interpolatedDoc: TEMPLATE,
      originalDoc: 'const a = "3"\n<User>\n${a}\n</User>',
      state: GLASS_STATE,
      interpolationArgs: opt.args || {},
      requestBlocks: [],
    }
  }

  return { getTestData, compile }
}

export function getCodeBlockWithStatePrompt() {
  function getTestData() {
    return {}
  }

  const compile = async (opt: { args: {} } = { args: {} }) => {
    const GLASS_STATE = {}

    const initProfile = { firstName: '', lastName: '', hasChatted: false }
    const [profile, setProfile] = useState(initProfile, GLASS_STATE, 'profile')
    const [moreState, setMoreState] = useState('', GLASS_STATE, 'moreState')

    const GLASSVAR = {}
    const TEMPLATE = `const initProfile = { firstName: '', lastName: '', hasChatted: false }
const [profile, setProfile] = useState(initProfile)
const [moreState, setMoreState] = useState('')

<Request model="gpt-4" onResponse={() => setProfile({ hasChatted: true})}>
hello world
</Request>`
    return {
      fileName: 'codeBlockWithState',
      interpolatedDoc: TEMPLATE,
      originalDoc:
        "const initProfile = { firstName: '', lastName: '', hasChatted: false }\nconst [profile, setProfile] = useState(initProfile)\nconst [moreState, setMoreState] = useState('')\n\n<Request model=\"gpt-4\" onResponse={() => setProfile({ hasChatted: true})}>\nhello world\n</Request>",
      state: GLASS_STATE,
      interpolationArgs: opt.args || {},
      requestBlocks: [
        {
          model: 'gpt-4',
          onResponse: () => setProfile({ hasChatted: true }),
          temperature: undefined,
          maxTokens: undefined,
          stopSequence: undefined,
        },
      ],
    }
  }

  return { getTestData, compile }
}

import { sayHello } from './ts/say-hello'

export function getComplexPrompt() {
  function getTestData() {
    return {}
  }

  const compile = async (opt: { args: { agentName: string; instructions: string; transcript: string } }) => {
    const GLASS_STATE = {}
    const { agentName, instructions, transcript } = opt.args
    sayHello({ name: 'chat' })

    const GLASSVAR = {}
    const TEMPLATE = `import {sayHello} from './say-hello'

sayHello({ name: 'chat' })

<System>
Read a Transcript and determine how to respond about the property's ${sayHello({ name: 'chat' })}. Valid responses are:

- \`NO_RESPONSE\`: use this if the transcript has nothing to do with ${agentName}
- \`HELP: <reason>\`: use this if the information you have about the ${agentName} is insufficient to provide an answer and you require more information
- \`<your response>\`: a useful response to the User given the property's ${agentName}

${(function generateCodeExamples() {
  const examples = []
  for (let i = 0; i < 10; i++) {
    examples.push(Math.random())
  }
  return examples.join('\n')
})()}
</System>

<User>
${agentName}
###
${instructions}
###

Transcript
###
${transcript}
###
</User>`
    return {
      fileName: 'complex',
      interpolatedDoc: TEMPLATE,
      originalDoc:
        "import {sayHello} from './say-hello'\n\nsayHello({ name: 'chat' })\n\n<System>\nRead a Transcript and determine how to respond about the property's ${sayHello({ name: 'chat' })}. Valid responses are:\n\n- `NO_RESPONSE`: use this if the transcript has nothing to do with ${agentName}\n- `HELP: <reason>`: use this if the information you have about the ${agentName} is insufficient to provide an answer and you require more information\n- `<your response>`: a useful response to the User given the property's ${agentName}\n\n${\n  function generateCodeExamples() {\n    const examples = []\n    for (let i = 0; i < 10; i++) {\n      examples.push(Math.random())\n    }\n    return examples.join('\\n')\n  }\n}\n</System>\n\n<User>\n${agentName}\n###\n${instructions}\n###\n\nTranscript\n###\n${transcript}\n###\n</User>",
      state: GLASS_STATE,
      interpolationArgs: opt.args || {},
      requestBlocks: [],
    }
  }

  return { getTestData, compile }
}

export function getDuplicateInterpolationPrompt() {
  function getTestData() {
    return {}
  }

  const compile = async (opt: { args: { foo: string; bar: string } }) => {
    const GLASS_STATE = {}
    const { foo, bar } = opt.args

    const GLASSVAR = {}
    const TEMPLATE = `<User>
${foo} ${bar} ${foo}
${bar}
</User>`
    return {
      fileName: 'duplicateInterpolation',
      interpolatedDoc: TEMPLATE,
      originalDoc: '<User>\n${foo} ${bar} ${foo}\n${bar}\n</User>',
      state: GLASS_STATE,
      interpolationArgs: opt.args || {},
      requestBlocks: [],
    }
  }

  return { getTestData, compile }
}

export function getForLoopPrompt() {
  function getTestData() {
    return {}
  }

  const compile = async (opt: { args: {} } = { args: {} }) => {
    const GLASS_STATE = {}

    const GLASSVAR = {
      '0': [
        { role: 'user', content: 'name an ice cream' },
        { role: 'assistant', content: 'Vanilla' },
        { role: 'user', content: 'name a fruit' },
      ]
        .map(
          m => `<Block role={${JSON.stringify(m.role)}}>
${m.content}
</Block>`
        )
        .join('\n\n'),
    }
    const TEMPLATE = `${GLASSVAR[0]}`
    return {
      fileName: 'forLoop',
      interpolatedDoc: TEMPLATE,
      originalDoc:
        "<For each={[\n    { role: 'user', content: 'name an ice cream' },\n    { role: \"assistant\", content: 'Vanilla' },\n    { role: 'user', content: 'name a fruit' }\n]} as=\"m\">\n<Block role={m.role}>\n${m.content}\n</Block>\n</For>",
      state: GLASS_STATE,
      interpolationArgs: opt.args || {},
      requestBlocks: [],
    }
  }

  return { getTestData, compile }
}

export function getForLoopAttributesOnlyPrompt() {
  function getTestData() {
    return {}
  }

  const compile = async (opt: { args: {} } = { args: {} }) => {
    const GLASS_STATE = {}

    const items = [{ role: 'user', content: 'who was gandhi?' }]

    const GLASSVAR = {
      '0': items
        .map(
          item => `<Block role={${JSON.stringify(item.role)}}>
${item.content}
</Block>`
        )
        .join('\n\n'),
    }
    const TEMPLATE = `const items = [{role: 'user', content: 'who was gandhi?'}]

${GLASSVAR[0]}
`
    return {
      fileName: 'forLoopAttributesOnly',
      interpolatedDoc: TEMPLATE,
      originalDoc:
        "const items = [{role: 'user', content: 'who was gandhi?'}]\n\n<For each={items} as=\"item\">\n<Block role={item.role}>\n${item.content}\n</Block>\n</For>\n",
      state: GLASS_STATE,
      interpolationArgs: opt.args || {},
      requestBlocks: [],
    }
  }

  return { getTestData, compile }
}

export function getQuestionAnswerPrompt() {
  function getTestData() {
    return {}
  }

  const compile = async (opt: { args: { question: string } }) => {
    const GLASS_STATE = {}
    const { question } = opt.args

    const GLASSVAR = {}
    const TEMPLATE = `<System>
You are a helpful assistant.
</System>

<User>
${question}
</User>

<Request model="gpt-3.5-turbo" />`
    return {
      fileName: 'questionAnswer',
      interpolatedDoc: TEMPLATE,
      originalDoc:
        '<System>\nYou are a helpful assistant.\n</System>\n\n<User>\n${question}\n</User>\n\n<Request model="gpt-3.5-turbo" />',
      state: GLASS_STATE,
      interpolationArgs: opt.args || {},
      requestBlocks: [
        {
          model: 'gpt-3.5-turbo',
          onResponse: undefined,
          temperature: undefined,
          maxTokens: undefined,
          stopSequence: undefined,
        },
      ],
    }
  }

  return { getTestData, compile }
}

async function questionAnswer(args: any) {
  const { getTestData, compile } = getQuestionAnswerPrompt()
  const c = await compile({ args })
  const res = await runGlass(c as any)
  return res.codeResponse !== undefined ? res.codeResponse : res.rawResponse
}

export function getGlassImportPrompt() {
  function getTestData() {
    return {}
  }

  const compile = async (opt: { args: {} } = { args: {} }) => {
    const GLASS_STATE = {}

    const [field, setField] = useState('', GLASS_STATE, 'field')

    const GLASSVAR = {}
    const TEMPLATE = `import questionAnswer from './questionAnswer.glass'

const [field, setField] = useState('')

<Assistant>
You are an assistant that creates questions for Jeopardy.
</Assistant>

<User>
Make a question about United States history.
</User>

<Request model="gpt-3.5-turbo" onResponse={async ({ message }) => {
    const answer = await questionAnswer({question: message})
    setField(answer)
}} />`
    return {
      fileName: 'glassImport',
      interpolatedDoc: TEMPLATE,
      originalDoc:
        "import questionAnswer from './questionAnswer.glass'\n\nconst [field, setField] = useState('')\n\n<Assistant>\nYou are an assistant that creates questions for Jeopardy.\n</Assistant>\n\n<User>\nMake a question about United States history.\n</User>\n\n<Request model=\"gpt-3.5-turbo\" onResponse={async ({ message }) => {\n    const answer = await questionAnswer({question: message})\n    setField(answer)\n}} />",
      state: GLASS_STATE,
      interpolationArgs: opt.args || {},
      requestBlocks: [
        {
          model: 'gpt-3.5-turbo',
          onResponse: async ({ message }) => {
            const answer = await questionAnswer({ question: message })
            setField(answer)
          },
          temperature: undefined,
          maxTokens: undefined,
          stopSequence: undefined,
        },
      ],
    }
  }

  return { getTestData, compile }
}

export function getIfStatementPrompt() {
  function getTestData() {
    return {}
  }

  const compile = async (opt: { args: {} } = { args: {} }) => {
    const GLASS_STATE = {}

    const useMe = true
    const subject = 'Einstein'

    const GLASSVAR = {
      '0': false
        ? `<User if={false}>
Who was gandhi?
</User>`
        : '',
      '1': useMe
        ? `<User if={useMe}>
Who was ${subject}?
</User>`
        : '',
      '2': false
        ? `<User if="false">
Who was gandhi?
</User>`
        : '',
    }
    const TEMPLATE = `const useMe = true
const subject = "Einstein"

<System>
You are a helpful assistant.
</System>

${GLASSVAR[0]}

${GLASSVAR[1]}

${GLASSVAR[2]}

<Request model="gpt-3.5-turbo" />`
    return {
      fileName: 'if-statement',
      interpolatedDoc: TEMPLATE,
      originalDoc:
        'const useMe = true\nconst subject = "Einstein"\n\n<System>\nYou are a helpful assistant.\n</System>\n\n<User if={false}>\nWho was gandhi?\n</User>\n\n<User if={useMe}>\nWho was ${subject}?\n</User>\n\n<User if="false">\nWho was gandhi?\n</User>\n\n<Request model="gpt-3.5-turbo" />',
      state: GLASS_STATE,
      interpolationArgs: opt.args || {},
      requestBlocks: [
        {
          model: 'gpt-3.5-turbo',
          onResponse: undefined,
          temperature: undefined,
          maxTokens: undefined,
          stopSequence: undefined,
        },
      ],
    }
  }

  return { getTestData, compile }
}

export function getIfConditionPrompt() {
  function getTestData() {
    return {}
  }

  const compile = async (opt: { args: {} } = { args: {} }) => {
    const GLASS_STATE = {}

    const GLASSVAR = {
      '0': true
        ? `<User if={true}>
Goodbye world
</User>`
        : '',
    }
    const TEMPLATE = `<System>
Hello world
</System>

${GLASSVAR[0]}`
    return {
      fileName: 'ifCondition',
      interpolatedDoc: TEMPLATE,
      originalDoc: '<System>\nHello world\n</System>\n\n<User if={true}>\nGoodbye world\n</User>',
      state: GLASS_STATE,
      interpolationArgs: opt.args || {},
      requestBlocks: [],
    }
  }

  return { getTestData, compile }
}

export function getInterstitialCodePrompt() {
  function getTestData() {
    return {}
  }

  const compile = async (opt: { args: {} } = { args: {} }) => {
    const GLASS_STATE = {}

    const foo = 'bar'
    const baz = 'bar'

    const GLASSVAR = {}
    const TEMPLATE = `const foo = "bar"
<User>
${foo}
</User>
const baz = "bar"`
    return {
      fileName: 'interstitialCode',
      interpolatedDoc: TEMPLATE,
      originalDoc: 'const foo = "bar"\n<User>\n${foo}\n</User>\nconst baz = "bar"',
      state: GLASS_STATE,
      interpolationArgs: opt.args || {},
      requestBlocks: [],
    }
  }

  return { getTestData, compile }
}

export function getMultipleInterpolationPrompt() {
  function getTestData() {
    return {}
  }

  const compile = async (opt: { args: { foo: string; bar: string } }) => {
    const GLASS_STATE = {}
    const { foo, bar } = opt.args

    const GLASSVAR = {}
    const TEMPLATE = `<User>
${foo} ${bar}
</User>`
    return {
      fileName: 'multipleInterpolation',
      interpolatedDoc: TEMPLATE,
      originalDoc: '<User>\n${foo} ${bar}\n</User>',
      state: GLASS_STATE,
      interpolationArgs: opt.args || {},
      requestBlocks: [],
    }
  }

  return { getTestData, compile }
}

export function getNoInterpolationPrompt() {
  function getTestData() {
    return {}
  }

  const compile = async (opt: { args: {} } = { args: {} }) => {
    const GLASS_STATE = {}

    const GLASSVAR = {}
    const TEMPLATE = `<User>
foo
</User>`
    return {
      fileName: 'noInterpolation',
      interpolatedDoc: TEMPLATE,
      originalDoc: '<User>\nfoo\n</User>',
      state: GLASS_STATE,
      interpolationArgs: opt.args || {},
      requestBlocks: [],
    }
  }

  return { getTestData, compile }
}

export function getNonInterpolationSequencePrompt() {
  function getTestData() {
    return {}
  }

  const compile = async (opt: { args: { foo: string } }) => {
    const GLASS_STATE = {}
    const { foo } = opt.args

    const GLASSVAR = {}
    const TEMPLATE = `<User>
${foo} and {foo}
</User>`
    return {
      fileName: 'nonInterpolationSequence',
      interpolatedDoc: TEMPLATE,
      originalDoc: '<User>\n${foo} and {foo}\n</User>',
      state: GLASS_STATE,
      interpolationArgs: opt.args || {},
      requestBlocks: [],
    }
  }

  return { getTestData, compile }
}

export function getQuestionAnswerPrompt() {
  function getTestData() {
    return {}
  }

  const compile = async (opt: { args: { question: string } }) => {
    const GLASS_STATE = {}
    const { question } = opt.args

    const GLASSVAR = {}
    const TEMPLATE = `<System>
You are a helpful assistant.
</System>

<User>
${question}
</User>

<Request model="gpt-3.5-turbo" />`
    return {
      fileName: 'questionAnswer',
      interpolatedDoc: TEMPLATE,
      originalDoc:
        '<System>\nYou are a helpful assistant.\n</System>\n\n<User>\n${question}\n</User>\n\n<Request model="gpt-3.5-turbo" />',
      state: GLASS_STATE,
      interpolationArgs: opt.args || {},
      requestBlocks: [
        {
          model: 'gpt-3.5-turbo',
          onResponse: undefined,
          temperature: undefined,
          maxTokens: undefined,
          stopSequence: undefined,
        },
      ],
    }
  }

  return { getTestData, compile }
}

export function getSingleIfConditionPrompt() {
  function getTestData() {
    return {}
  }

  const compile = async (opt: { args: {} } = { args: {} }) => {
    const GLASS_STATE = {}

    const GLASSVAR = {
      '0': true
        ? `<User if={true}>
Goodbye world
</User>`
        : '',
    }
    const TEMPLATE = `<System>
Hello world
</System>

${GLASSVAR[0]}`
    return {
      fileName: 'singleIfCondition',
      interpolatedDoc: TEMPLATE,
      originalDoc: '<System>\nHello world\n</System>\n\n<User if={true}>\nGoodbye world\n</User>',
      state: GLASS_STATE,
      interpolationArgs: opt.args || {},
      requestBlocks: [],
    }
  }

  return { getTestData, compile }
}

export function getSpecialCharactersPrompt() {
  function getTestData() {
    return {}
  }

  const compile = async (opt: { args: {} } = { args: {} }) => {
    const GLASS_STATE = {}

    const type = 'assistant'
    const role = `helpful ${type}`

    const GLASSVAR = {}
    const TEMPLATE = `const type = 'assistant'
const role = \`helpful \${type}\`

<System>
You are a ${role}.
</System>

<Request model="gpt-3.5-turbo" />`
    return {
      fileName: 'specialCharacters',
      interpolatedDoc: TEMPLATE,
      originalDoc:
        'const type = \'assistant\'\nconst role = `helpful ${type}`\n\n<System>\nYou are a ${role}.\n</System>\n\n<Request model="gpt-3.5-turbo" />',
      state: GLASS_STATE,
      interpolationArgs: opt.args || {},
      requestBlocks: [
        {
          model: 'gpt-3.5-turbo',
          onResponse: undefined,
          temperature: undefined,
          maxTokens: undefined,
          stopSequence: undefined,
        },
      ],
    }
  }

  return { getTestData, compile }
}

export function getTsBrowserAnthropicPrompt() {
  function getTestData() {
    return {}
  }

  const compile = async (opt: { args: {} } = { args: {} }) => {
    const GLASS_STATE = {}

    const res = await fetch('https://elliottburris.com')
    const website = await res.text()

    const GLASSVAR = {}
    const TEMPLATE = `const res = await fetch("https://elliottburris.com")
const website = await res.text()

<User>
your job is to answer questions based on the following website code:
###
${website}
###
where did elliott go to school
</User>

<Request model="claude-v1" />`
    return {
      fileName: 'ts-browser-anthropic',
      interpolatedDoc: TEMPLATE,
      originalDoc:
        'const res = await fetch("https://elliottburris.com")\nconst website = await res.text()\n\n<User>\nyour job is to answer questions based on the following website code:\n###\n${website}\n###\nwhere did elliott go to school\n</User>\n\n<Request model="claude-v1" />',
      state: GLASS_STATE,
      interpolationArgs: opt.args || {},
      requestBlocks: [
        {
          model: 'claude-v1',
          onResponse: undefined,
          temperature: undefined,
          maxTokens: undefined,
          stopSequence: undefined,
        },
      ],
    }
  }

  return { getTestData, compile }
}

export function getTsBrowserPrompt() {
  function getTestData() {
    return {}
  }

  const compile = async (opt: { args: { input: string; url: string } }) => {
    const GLASS_STATE = {}
    const { input, url } = opt.args
    const res = await fetch(url)
    const website = await res.text()

    const GLASSVAR = {}
    const TEMPLATE = `const res = await fetch(url)
const website = await res.text()

<System>
your job is to answer questions based on the following website code:
###
${website}
###
</System>

<User>
${input}
</User>

<Request model="gpt-3.5-turbo" />`
    return {
      fileName: 'ts-browser',
      interpolatedDoc: TEMPLATE,
      originalDoc:
        'const res = await fetch(url)\nconst website = await res.text()\n\n<System>\nyour job is to answer questions based on the following website code:\n###\n${website}\n###\n</System>\n\n<User>\n${input}\n</User>\n\n<Request model="gpt-3.5-turbo" />',
      state: GLASS_STATE,
      interpolationArgs: opt.args || {},
      requestBlocks: [
        {
          model: 'gpt-3.5-turbo',
          onResponse: undefined,
          temperature: undefined,
          maxTokens: undefined,
          stopSequence: undefined,
        },
      ],
    }
  }

  return { getTestData, compile }
}

export function getTsForFragmentPrompt() {
  function getTestData() {
    return {}
  }

  const compile = async (opt: { args: {} } = { args: {} }) => {
    const GLASS_STATE = {}

    const items = [
      { role: 'user', content: 'name an ice cream' },
      { role: 'assistant', content: 'Vanilla' },
      { role: 'user', content: 'name a color' },
    ]

    const GLASSVAR = {
      '0': items
        .map(
          item => `<Block role={${JSON.stringify(item.role)}}>
${item.content}
</Block>`
        )
        .join('\n\n'),
    }
    const TEMPLATE = `
const items = [
  { role: 'user', content: 'name an ice cream' },
  { role: 'assistant', content: 'Vanilla' },
  { role: 'user', content: 'name a color' },
]

${GLASSVAR[0]}


<Request model="gpt-3.5-turbo" />`
    return {
      fileName: 'ts-for-fragment',
      interpolatedDoc: TEMPLATE,
      originalDoc:
        "---\nlanguage: typescript\n---\n\nconst items = [\n  { role: 'user', content: 'name an ice cream' },\n  { role: 'assistant', content: 'Vanilla' },\n  { role: 'user', content: 'name a color' },\n]\n\n<For each={items} as=\"item\">\n<Block role={item.role}>\n${item.content}\n</Block>\n</For>\n\n\n<Request model=\"gpt-3.5-turbo\" />",
      state: GLASS_STATE,
      interpolationArgs: opt.args || {},
      requestBlocks: [
        {
          model: 'gpt-3.5-turbo',
          onResponse: undefined,
          temperature: undefined,
          maxTokens: undefined,
          stopSequence: undefined,
        },
      ],
    }
  }

  return { getTestData, compile }
}

export function getTsForPrompt() {
  function getTestData() {
    return {}
  }

  const compile = async (opt: { args: {} } = { args: {} }) => {
    const GLASS_STATE = {}

    const messages = [
      { role: 'user', content: 'name an ice cream' },
      { role: 'assistant', content: 'Vanilla' },
      { role: 'user', content: 'name a fruit' },
    ]

    const GLASSVAR = {
      '0': messages
        .map(
          m => `
<Block role={${JSON.stringify(m.role)}}>
${m.content}
</Block>
`
        )
        .join('\n\n'),
    }
    const TEMPLATE = `
const messages = [
    { role: 'user', content: 'name an ice cream' },
    { role: "assistant", content: 'Vanilla' },
    { role: 'user', content: 'name a fruit' }
]

${GLASSVAR[0]}

<Request model="gpt-3.5-turbo" />`
    return {
      fileName: 'ts-for',
      interpolatedDoc: TEMPLATE,
      originalDoc:
        "---\nlanguage: typescript\n---\n\nconst messages = [\n    { role: 'user', content: 'name an ice cream' },\n    { role: \"assistant\", content: 'Vanilla' },\n    { role: 'user', content: 'name a fruit' }\n]\n\n<For each={messages} as=\"m\">\n\n<Block role={m.role}>\n${m.content}\n</Block>\n\n</For>\n\n<Request model=\"gpt-3.5-turbo\" />",
      state: GLASS_STATE,
      interpolationArgs: opt.args || {},
      requestBlocks: [
        {
          model: 'gpt-3.5-turbo',
          onResponse: undefined,
          temperature: undefined,
          maxTokens: undefined,
          stopSequence: undefined,
        },
      ],
    }
  }

  return { getTestData, compile }
}

import { sayHello } from './ts/sayHello'

export function getTsImportPrompt() {
  function getTestData() {
    return {}
  }

  const compile = async (opt: { args: {} } = { args: {} }) => {
    const GLASS_STATE = {}

    const GLASSVAR = {}
    const TEMPLATE = `import {sayHello} from './sayHello'

<System>
You are a helpful assistant.
</System>

<User>
${sayHello({ name: 'john' })}
</User>

<Request model="gpt-3.5-turbo" />`
    return {
      fileName: 'ts-import',
      interpolatedDoc: TEMPLATE,
      originalDoc:
        "import {sayHello} from './sayHello'\n\n<System>\nYou are a helpful assistant.\n</System>\n\n<User>\n${sayHello({ name: 'john' })}\n</User>\n\n<Request model=\"gpt-3.5-turbo\" />",
      state: GLASS_STATE,
      interpolationArgs: opt.args || {},
      requestBlocks: [
        {
          model: 'gpt-3.5-turbo',
          onResponse: undefined,
          temperature: undefined,
          maxTokens: undefined,
          stopSequence: undefined,
        },
      ],
    }
  }

  return { getTestData, compile }
}

export function getTsInterpolationPrompt() {
  function getTestData() {
    return {}
  }

  const compile = async (opt: { args: {} } = { args: {} }) => {
    const GLASS_STATE = {}

    const userText = 'Tell me a storyyyy.'

    const GLASSVAR = {}
    const TEMPLATE = `const userText = "Tell me a storyyyy."

<User>
You are a helpful assistant.

${userText}
</User>

<Assistant>
What would you like it to be about?
</Assistant>

<Request model="gpt-3.5-turbo" />`
    return {
      fileName: 'ts-interpolation',
      interpolatedDoc: TEMPLATE,
      originalDoc:
        'const userText = "Tell me a storyyyy."\n\n<User>\nYou are a helpful assistant.\n\n${userText}\n</User>\n\n<Assistant>\nWhat would you like it to be about?\n</Assistant>\n\n<Request model="gpt-3.5-turbo" />',
      state: GLASS_STATE,
      interpolationArgs: opt.args || {},
      requestBlocks: [
        {
          model: 'gpt-3.5-turbo',
          onResponse: undefined,
          temperature: undefined,
          maxTokens: undefined,
          stopSequence: undefined,
        },
      ],
    }
  }

  return { getTestData, compile }
}

export function getTsLoopPrompt() {
  function getTestData() {
    return {}
  }

  const compile = async (opt: { args: { input: string } }) => {
    const GLASS_STATE = {}
    const { input } = opt.args
    const [numMessages, setNumMessages] = useState(0, GLASS_STATE, 'numMessages')

    const GLASSVAR = {}
    const TEMPLATE = `const [numMessages, setNumMessages] = useState(0)

<System>
You are a helpful assistant.
</System>

<Transcript />

<User>
${input}
</User>

<Request model="gpt-3.5-turbo" />`
    return {
      fileName: 'ts-loop',
      interpolatedDoc: TEMPLATE,
      originalDoc:
        'const [numMessages, setNumMessages] = useState(0)\n\n<System>\nYou are a helpful assistant.\n</System>\n\n<Transcript />\n\n<User>\n${input}\n</User>\n\n<Request model="gpt-3.5-turbo" />',
      state: GLASS_STATE,
      interpolationArgs: opt.args || {},
      requestBlocks: [
        {
          model: 'gpt-3.5-turbo',
          onResponse: undefined,
          temperature: undefined,
          maxTokens: undefined,
          stopSequence: undefined,
        },
      ],
    }
  }

  return { getTestData, compile }
}

export function getTsSpecialCharacterPrompt() {
  function getTestData() {
    return {}
  }

  const compile = async (opt: { args: {} } = { args: {} }) => {
    const GLASS_STATE = {}

    const type = 'pirate'
    const role = `helpful ${type}`

    const GLASSVAR = {}
    const TEMPLATE = `const type = 'pirate'
const role = \`helpful \${type}\`

<System>
You are a ${role}.
</System>

<Request model="gpt-3.5-turbo" />`
    return {
      fileName: 'ts-special-character',
      interpolatedDoc: TEMPLATE,
      originalDoc:
        'const type = \'pirate\'\nconst role = `helpful ${type}`\n\n<System>\nYou are a ${role}.\n</System>\n\n<Request model="gpt-3.5-turbo" />',
      state: GLASS_STATE,
      interpolationArgs: opt.args || {},
      requestBlocks: [
        {
          model: 'gpt-3.5-turbo',
          onResponse: undefined,
          temperature: undefined,
          maxTokens: undefined,
          stopSequence: undefined,
        },
      ],
    }
  }

  return { getTestData, compile }
}

export function getTsStatePrompt() {
  function getTestData() {
    return {}
  }

  const compile = async (opt: { args: {} } = { args: {} }) => {
    const GLASS_STATE = {}

    const initProfile = { firstName: '', lastName: '', hasChatted: false }
    const [profile, setProfile] = useState(initProfile, GLASS_STATE, 'profile')
    const [moreState, setMoreState] = useState('', GLASS_STATE, 'moreState')
    setMoreState('foo')

    const GLASSVAR = {}
    const TEMPLATE = `const initProfile = { firstName: '', lastName: '', hasChatted: false }
const [profile, setProfile] = useState(initProfile)
const [moreState, setMoreState] = useState('')

setMoreState('foo')

<Assistant>
You are a helpful assistant.
</Assistant>

<User>
How are you?
</User>


<Request model="gpt-3.5-turbo" onResponse={({ message }) => {
    setProfile({ hasChatted: true })
}} />
`
    return {
      fileName: 'ts-state',
      interpolatedDoc: TEMPLATE,
      originalDoc:
        "const initProfile = { firstName: '', lastName: '', hasChatted: false }\nconst [profile, setProfile] = useState(initProfile)\nconst [moreState, setMoreState] = useState('')\n\nsetMoreState('foo')\n\n<Assistant>\nYou are a helpful assistant.\n</Assistant>\n\n<User>\nHow are you?\n</User>\n\n\n<Request model=\"gpt-3.5-turbo\" onResponse={({ message }) => {\n    setProfile({ hasChatted: true })\n}} />\n",
      state: GLASS_STATE,
      interpolationArgs: opt.args || {},
      requestBlocks: [
        {
          model: 'gpt-3.5-turbo',
          onResponse: ({ message }) => {
            setProfile({ hasChatted: true })
          },
          temperature: undefined,
          maxTokens: undefined,
          stopSequence: undefined,
        },
      ],
    }
  }

  return { getTestData, compile }
}

export function getTsTestsPrompt() {
  function getTestData() {
    return [
      {
        question: 'where did elliott go to school',
        url: 'https://elliottburris.com',
      },
      {
        question: "what is elliott's last name",
        url: 'https://elliottburris.com',
      },
    ].map(glass_example => ({ ...{}, ...glass_example }))
  }

  const compile = async (opt: { args: { question: string; url: string } }) => {
    const GLASS_STATE = {}
    const { question, url } = opt.args
    const res = await fetch(url)
    const website = await res.text()

    const GLASSVAR = {}
    const TEMPLATE = `
<Test>
=
// const question = "where did elliott go to school"
// return an array of objects to run a list of tests; no need to return if you just want a single test
return [{
    question: "where did elliott go to school",
    url: "https://elliottburris.com"
},{
    question: "what is elliott's last name",
    url: "https://elliottburris.com"
}]
</Test>

const res = await fetch(url)
const website = await res.text()

<System>
your job is to answer questions based on the following website code:
###
${website}
###
</System>

<User>
${question}
</User>


<Request model="gpt-3.5-turbo" />`
    return {
      fileName: 'ts-tests',
      interpolatedDoc: TEMPLATE,
      originalDoc:
        '---\nlanguage: typescript\n---\n\n<Test>\n=\n// const question = "where did elliott go to school"\n// return an array of objects to run a list of tests; no need to return if you just want a single test\nreturn [{\n    question: "where did elliott go to school",\n    url: "https://elliottburris.com"\n},{\n    question: "what is elliott\'s last name",\n    url: "https://elliottburris.com"\n}]\n</Test>\n\nconst res = await fetch(url)\nconst website = await res.text()\n\n<System>\nyour job is to answer questions based on the following website code:\n###\n${website}\n###\n</System>\n\n<User>\n${question}\n</User>\n\n\n<Request model="gpt-3.5-turbo" />',
      state: GLASS_STATE,
      interpolationArgs: opt.args || {},
      requestBlocks: [
        {
          model: 'gpt-3.5-turbo',
          onResponse: undefined,
          temperature: undefined,
          maxTokens: undefined,
          stopSequence: undefined,
        },
      ],
    }
  }

  return { getTestData, compile }
}

import c from 'c'

export function getWithImportPrompt() {
  function getTestData() {
    return {}
  }

  const compile = async (opt: { args: { b: string } }) => {
    const GLASS_STATE = {}
    const { b } = opt.args
    const a = '3'

    const GLASSVAR = {}
    const TEMPLATE = `import c from "c"

const a = "3"
<User>
${a} ${b} ${c}
</User>`
    return {
      fileName: 'withImport',
      interpolatedDoc: TEMPLATE,
      originalDoc: 'import c from "c"\n\nconst a = "3"\n<User>\n${a} ${b} ${c}\n</User>',
      state: GLASS_STATE,
      interpolationArgs: opt.args || {},
      requestBlocks: [],
    }
  }

  return { getTestData, compile }
}

export function getWithInterpolationPrompt() {
  function getTestData() {
    return {}
  }

  const compile = async (opt: { args: { foo: string } }) => {
    const GLASS_STATE = {}
    const { foo } = opt.args

    const GLASSVAR = {}
    const TEMPLATE = `<User>
${foo}
</User>`
    return {
      fileName: 'withInterpolation',
      interpolatedDoc: TEMPLATE,
      originalDoc: '<User>\n${foo}\n</User>',
      state: GLASS_STATE,
      interpolationArgs: opt.args || {},
      requestBlocks: [],
    }
  }

  return { getTestData, compile }
}

export const Glass = {
  basic: getBasicPrompt,
  duplicateInterpolation: getDuplicateInterpolationPrompt,
  interpolation: getInterpolationPrompt,
  interstitial: getInterstitialPrompt,
  literal: getLiteralPrompt,
  multipleInterpolation: getMultipleInterpolationPrompt,
  nonInterpolation: getNonInterpolationPrompt,
  pyBrowser: getPyBrowserPrompt,
  pyFor: getPyForPrompt,
  pyInterpolation: getPyInterpolationPrompt,
  testblock: getTestblockPrompt,
  args: getArgsPrompt,
  codeBlock: getCodeBlockPrompt,
  codeBlockWithState: getCodeBlockWithStatePrompt,
  complex: getComplexPrompt,
  duplicateInterpolation: getDuplicateInterpolationPrompt,
  forLoop: getForLoopPrompt,
  forLoopAttributesOnly: getForLoopAttributesOnlyPrompt,
  glassImport: getGlassImportPrompt,
  ifStatement: getIfStatementPrompt,
  ifCondition: getIfConditionPrompt,
  interstitialCode: getInterstitialCodePrompt,
  multipleInterpolation: getMultipleInterpolationPrompt,
  noInterpolation: getNoInterpolationPrompt,
  nonInterpolationSequence: getNonInterpolationSequencePrompt,
  questionAnswer: getQuestionAnswerPrompt,
  singleIfCondition: getSingleIfConditionPrompt,
  specialCharacters: getSpecialCharactersPrompt,
  tsBrowserAnthropic: getTsBrowserAnthropicPrompt,
  tsBrowser: getTsBrowserPrompt,
  tsForFragment: getTsForFragmentPrompt,
  tsFor: getTsForPrompt,
  tsImport: getTsImportPrompt,
  tsInterpolation: getTsInterpolationPrompt,
  tsLoop: getTsLoopPrompt,
  tsSpecialCharacter: getTsSpecialCharacterPrompt,
  tsState: getTsStatePrompt,
  tsTests: getTsTestsPrompt,
  withImport: getWithImportPrompt,
  withInterpolation: getWithInterpolationPrompt,
}
