const initProfile = { firstName: '', lastName: '', hasChatted: false }
// useState comes from @glass-lang/glasslib and helps you manage state.
// By declaring a variable 'profile', Glass will manage a field on the state object named 'profile'.
const [profile, setProfile] = useState(initProfile)
const [moreState, setMoreState] = useState('')

// Once we run this prompt, the state will be initialized to the following value:

// <State contentType="json">
// {
//     "profile": {
//         "firstName": "",
//         "lastName": "",
//         "hasChatted": false
//     },
//     "moreState": ""
// }
// </State>

<Assistant>
You are a helpful assistant. Here's the user's profile:

${JSON.stringify(profile, null, 2)}
</Assistant>

<User>
How are you?
</User>

<Request model="gpt-3.5-turbo" onResponse={({ message }) => {
    // when we get a response, we can change how the <State>
    // will be written to the resulting document via the set* methods we generated above.
    setProfile({ ...profile, hasChatted: true }) 
    // could also make a database request
    // db.user.update, etc..
    // setProfile is *just* in control of the resulting .glass document
}} />