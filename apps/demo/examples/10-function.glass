LLMs have the most power when you give them tools to use. Glass supports the ability to define Tools inside your prompts. Glass will give instructions to the LLM for how to use the tools, and will run the code any time the LLM wants to use a tool.

Providing a schema explains to the LLM how to use your tool. Use https://github.com/colinhacks/zod to define your schema.

<Tool
  name="calculator"
  description="Calculates the result of a math expression."
  schema={z.object({ expression: z.string().describe('expression to eval with JavaScript') })}
  run={({ expression }) => '' + eval(expression)}
/>

<User>
what is 2 to the .12345 power?
</User>

<Request model="gpt-3.5-turbo-0613" />

<Tool name="" description="" schema={z.object({})} run={(arg) => } />