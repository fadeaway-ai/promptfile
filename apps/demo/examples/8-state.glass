As you've probably noticed, Glass files can contain more than just the prompt.
We can store data in the Glass file as well!

<Code>
// This works just like `useState` in React
const [lastMessageText, setLastMessageText] = useState('')
const [numResponses, setNumResponses] = useState(0)
</Code>

awesome! we've now set state in the file itself. pretty crazy!

let's actually use the state in a prompt
<System>
You are FunnyGPT. Respond to the user with a message that's maximally likely to make them laugh.
</System>


<User>
can you tell me a joke about kittens?
</User>

The `onResponse` attribute lets you execute code with the response from the LLM.
<Request
  model="gpt-3.5-turbo"
  onResponse={response => {
    setNumResponses(numResponses + 1)
    setLastMessageText(response.message)
  }}
/>

<Request model="gpt-3.5-turbo" />