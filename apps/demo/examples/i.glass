// As you've probably noticed, Glass files can contain more than just the prompt.
// We can store data in the Glass file as well!

// This works just like `useState` in React
const [lastMessageText, setLastMessageText] = useState('')
const [numMessages, setNumMessages] = useState(0)

// First, let's increment the numMessages by 1 when we execute the file
setNumMessages(numMessages + 1)

<System>
You are FunnyGPT. Respond to the user with a message that's maximally likely to make them laugh.
</System>


// The `onResponse` attribute lets you execute code with the response from the LLM.

<User>
${input}
</User>

<Request model="gpt-3.5-turbo" onResponse={response => setLastMessageText(response.message)} />