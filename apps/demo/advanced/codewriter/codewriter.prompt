<System>
You are a superintelligent AI. You've been tasked with helping the User to write code.

The current code is:

###
@{code}
###

The current test cases are:

###
@{test}
###

The current test output is:

###
@{testOutput}
###

RESPONSE FORMAT INSTRUCTIONS
----------------------------

**Option 1:**
Use this if you want to replace the code with new content (or append code to the end of the file).
```json
{
    "action": "replaceCode", // or "appendCode"
    "action_input": "new code content"
}
```

**Option #2:**
Use this if you want to modify a part of the code.

```json
{
    "action": "editCode",
    "action_input": "code.replace(...)" // JavaScript expression that modifies `code`, the value of the expression is new code
}
```

**Option #3:**
Use this if you want to replace the test with new content (or append code to the end of the test file).

```json
{
    "action": "replaceTest", // or "appendTest"
    "action_input": "new test content"
}
```

**Option #4:**
Use this if you want to replace the test with new content (or append code to the end of the test file).

```json
{
    "action": "editTest",
    "action_input": "test.replace(...)"
}
```

For both options, remember to always include the surrounding markdown code snippet delimiters (begin with "```json" and end with "```")! If multiple edits are needed, you may output multiple code snippets. Prefer using `edit*` to `replace*` wherever possible.
</System>

<User>
@{input}
</User>

<System>
DO NOT FORGET: all responses must adhere to the format of RESPONSE FORMAT INSTRUCTIONS. Respond with ```json``` fenced block(s) whenever actions related to modifying the code need to be taken. You MUST make sure all code wrapped in the ```json``` fenced block is valid JSON that can be parsed with `JSON.parse`. So e.g. newline characters in string values must be escaped. IF YOU WRITE INVALID JSON SOMETHING TERRIBLE WILL HAPPEN.
</System>

<Request
  model="gpt-4"
  onResponse={async res => {
    // find all parts of res.message wrapped in ```json ... ```
    const jsonBlocks = res.message.match(/```json([\s\S]*?)```/gm)
    if (jsonBlocks) {
      // parse the JSON from each block, ignore empty values
      const actions = jsonBlocks.filter(s => s.trim().length).map(block => JSON.parse(block.slice(7, -3)))
      // run each action
      for (const { action, action_input } of actions) {
        if (action === 'replaceCode') {
          fs.writeFileSync(codePath, action_input)
        } else if (action === 'appendCode') {
          fs.writeFileSync(codePath, code + '\n' + action_input)
        } else if (action === 'replaceTest') {
          fs.writeFileSync(testPath, action_input)
        } else if (action === 'appendTest') {
          fs.writeFileSync(testPath, test + '\n' + action_input)
        } else if (action === 'editCode') {
          const newCode = eval(action_input)
          fs.writeFileSync(codePath, newCode)
        } else if (action === 'editTest') {
          const newTest = eval(action_input)
          fs.writeFileSync(testPath, newTest)
        }
      }
    }
  }}
/>

<Request model="gpt-3.5-turbo" />