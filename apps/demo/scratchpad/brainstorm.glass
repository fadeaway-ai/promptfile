<System>
You are ChatGPT. Browsing: disabled.
</System>

<User>
I have the following code:

```ts
export async function runGlassExtension(document: vscode.TextDocument, outputChannel: vscode.OutputChannel) {
  // set document to active if it isn't already
  const activeEditor = vscode.window.activeTextEditor
  if (!activeEditor || activeEditor.document.uri.fsPath !== document.uri.fsPath) {
    await vscode.window.showTextDocument(document)
  }
  const session = document.uri.fsPath
  const glass = document.getText()
  const frontmatter = parseFrontmatterFromGlass(glass)
  if (!frontmatter) {
    await vscode.window.showErrorMessage('Unable to parse frontmatter from Glass file')
    return
  }
  const elements = parseGlassBlocksRecursive(glass)
  const requestElement = elements.find(element => element.tag === 'Request')
  const model = requestElement?.attrs?.find((attr: any) => attr.name === 'model')?.stringValue
  const languageModel = LANGUAGE_MODELS.find(m => m.name === model)
  if (!languageModel) {
    await vscode.window.showErrorMessage(`Unable to find model ${model}`)
    return
  }
  switch (languageModel.creator) {
    case LanguageModelCreator.anthropic:
      const anthropicKey = getAnthropicKey()
      if (anthropicKey == null || anthropicKey === '') {
        await vscode.commands.executeCommand('workbench.action.openSettings', 'glass.anthropicKey')
        await vscode.window.showErrorMessage('Add Anthropic API key to run Glass files.')
        return
      }
      break
    case LanguageModelCreator.openai:
      const openaiKey = getOpenaiKey()
      if (openaiKey == null || openaiKey === '') {
        await vscode.commands.executeCommand('workbench.action.openSettings', 'glass.openaiKey')
        await vscode.window.showErrorMessage('Add OpenAI API key to run Glass files.')
        return
      }
      break
  }

  // Ensure a workspace is opened
  if (!vscode.workspace.workspaceFolders) {
    await vscode.window.showErrorMessage('No workspace opened')
    return
  }

  try {
    let numBlocks = parseGlassTranscriptBlocks(glass).length
    const resp = await executeGlassFile(session, outputChannel, document, glass, {}, async progress => {
      const newBlocks = parseGlassTranscriptBlocks(progress.nextGlassfile)
      if (newBlocks.length > numBlocks) {
        numBlocks = newBlocks.length
        // make a document edit to update the document with progress.nextGlassfile
        const edit = new vscode.WorkspaceEdit()
        const range = new vscode.Range(0, 0, document.lineCount, 0)
        const withFrontmatter = addFrontmatter(
          progress.nextGlassfile,
          frontmatter.file,
          frontmatter.session,
          frontmatter.timestamp
        )
        edit.replace(document.uri, range, withFrontmatter)
        await vscode.workspace.applyEdit(edit)
        scrollToBottom(document)
        return true
      }

      const currentGlass = document.getText()
      const blocks = parseGlassTranscriptBlocks(currentGlass)
      const streamingBlock = blocks.find(block => (block.child?.content ?? '').includes('█'))
      if (!streamingBlock || !progress.response || !streamingBlock.child) {
        return false
      }
      const edit = new vscode.WorkspaceEdit()
      const range = new vscode.Range(
        document.positionAt(streamingBlock.child.position.start.offset),
        document.positionAt(streamingBlock.child.position.end.offset)
      )
      edit.replace(document.uri, range, progress.response)
      await vscode.workspace.applyEdit(edit)
      scrollToBottom(document)
      return true
    })
    if (!document.getText().includes('█')) {
      return
    }

    // remove the █ character via document
    const edit = new vscode.WorkspaceEdit()
    const location = document.getText().indexOf('█')
    edit.delete(document.uri, new vscode.Range(document.positionAt(location), document.positionAt(location + 1)))
    if (resp.continued) {
      await vscode.workspace.applyEdit(edit)
      scrollToBottom(document)
      await runGlassExtension(document, outputChannel)
    } else {
      const addToGlassfile = `


<User>

</User>


<Request model="${model}" />`
      // make a document edit to update the document with progress.nextGlassfile
      const range = new vscode.Range(0, 0, document.lineCount, 0)
      edit.insert(document.uri, range.end, addToGlassfile)
      await vscode.workspace.applyEdit(edit)
      await document.save()
      scrollToBottom(document)
      const finalGlassfile = document.getText()
      const lines = finalGlassfile.split('\n')
      const position = new vscode.Position(lines.length - 5, 0)
      const selection = new vscode.Selection(position, position)
      const activeEditor = vscode.window.activeTextEditor
      if (activeEditor && activeEditor.document.uri.fsPath === document.uri.fsPath) {
        activeEditor.selection = selection
        activeEditor.revealRange(selection)
      }
    }
  } catch (error) {
    console.error(error)
    void vscode.window.showErrorMessage(`ERROR: ${error}`)
  }
}
```

I've noticed that this code doesn't activate the cursor in the document after it is run. this may be because the running document isn't always active when it's run. how can i fix this?
</User>

<Request model="gpt-4" />